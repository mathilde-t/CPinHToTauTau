[core]

# inherit from the columnflow configuration file
inherit: $CF_BASE/law.cfg


[modules]

columnflow.tasks.cms.inference
columnflow.tasks.cms.external
httcp.tasks


[logging]

law: INFO
luigi-interface: INFO
gfal2: WARNING
columnflow.columnar_util-perf: INFO


[analysis]

default_analysis: httcp.config.analysis_httcp.analysis_httcp
#default_config: run2_2017_nano_local_v10
#default_dataset: h_ggf_tautau_powheg
default_config: run3_2022_preEE_tau_spinner
default_dataset: h_ggf_htt_filtered

calibration_modules: columnflow.calibration.cms.{jets,met}, httcp.calibration.main
selection_modules: columnflow.selection.{empty}, columnflow.selection.cms.{json_filter, met_filters}, httcp.selection.main
production_modules: columnflow.production.{categories,normalization,processes}, columnflow.production.cms.{btag,electron,mc_weight,muon,pdf,pileup,scale,seeds}, httcp.production.main
categorization_modules: httcp.categorization.main
weight_production_modules: columnflow.weight.{empty,all_weights},httcp.weights.main
ml_modules: columnflow.ml, httcp.ml.example
inference_modules: columnflow.inference, httcp.inference.example

default_keep_reduced_events: True

# namespace of all columnflow tasks
cf_task_namespace: cf

# default sandbox for main tasks with standard packages for columnar processing
default_columnar_sandbox: bash::$CF_BASE/sandboxes/venv_columnar.sh

# wether or not the ensure_proxy decorator should be skipped, even if used by task's run methods
skip_ensure_proxy: False

# some remote workflow parameter defaults
htcondor_flavor: $CF_HTCONDOR_FLAVOR
htcondor_share_software: False
slurm_flavor: $CF_SLURM_FLAVOR
slurm_partition: $CF_SLURM_PARTITION

# ChunkedIOHandler defaults
chunked_io_chunk_size: 50000
chunked_io_pool_size: 2
chunked_io_debug: False

# csv list of task families that inherit from ChunkedReaderMixin and whose output arrays should be
# checked (raising an exception) for non-finite values before saving them to disk
check_finite_output: cf.CalibrateEvents, cf.ProduceColumns

# csv list of task families that inherit from ChunkedReaderMixin and whose input columns should be
# checked (raising an exception) for overlaps between fields when created a merged input array
check_overlapping_inputs: None

# whether to log runtimes of array functions by default
log_array_function_runtime: False


[outputs]

# list of all used file systems
wlcg_file_systems: local, local_fs, wlcg_fs_infn_redirector, wlcg_fs_global_redirector

# list of file systems used by columnflow.tasks.external.GetDatasetLFNs.iter_nano_files to
# look for the correct fs per nano input file (in that order)
lfn_sources: wlcg_fs_infn_redirector, wlcg_fs_global_redirector

# output locations per task family
# for local targets : "local[, LOCAL_FS_NAME or STORE_PATH]"
# for remote targets: "wlcg[, WLCG_FS_NAME]"
# (when WLCG_FS_NAME is empty, the tasks' "default_wlcg_fs" attribute is used)
# examples:
# examples: f.CreateCutflowHistograms:     wlcg, wlcg_fs_desy_stzakhar

cf.BundleRepo: wlcg
cf.BundleSoftware: wlcg
cf.BundleBashSandbox: wlcg
cf.BundleCMSSWSandbox: wlcg
cf.BundleExternalFiles: wlcg
cf.GetDatasetLFNs: wlcg
cf.CalibrateEvents: wlcg
cf.SelectEvents: wlcg
cf.MergeSelectionStats: wlcg
cf.MergeSelectionMasks: wlcg
cf.ReduceEvents: wlcg
cf.MergeReductionStats: wlcg
cf.MergeReducedEvents: wlcg
cf.ProduceColumns: wlcg
cf.CreateHistograms : wlcg
cf.MergeHistograms : wlcg
cf.PlotVariables1D : local
cf.CreatePileupWeights: wlcg
cf.PrepareMLEvents: wlcg
cf.MergeMLEvents: wlcg
cf.MLTraining: wlcg
cf.MLEvaluation: wlcg
cf.UniteColumns: wlcg
[jobs]

job_file_dir: $CF_JOB_BASE
job_file_dir_cleanup: False
job_file_dir_mkdtemp: sub_{{task_id}}_XXX

# storage element (SE) and output directory on that SE for crab's internal output
# (crab might not even move files there, but it is strictly required for crab's job submission)
crab_storage_element: $CF_CRAB_STORAGE_ELEMENT
crab_base_directory: $CF_CRAB_BASE_DIRECTORY

# lcg setup file sourced in remote jobs to access gfal tools
#remote_lcg_setup: /cvmfs/grid.cern.ch/centos7-ui-200122/etc/profile.d/setup-c7-ui-python3-example.sh
#remote_lcg_setup_el7: /cvmfs/grid.cern.ch/centos7-ui-200122/etc/profile.d/setup-c7-ui-python3-example.sh
remote_lcg_setup_el9: /cvmfs/grid.cern.ch/alma9-ui-test/etc/profile.d/setup-alma9-test.sh

# whether the loading of the remove lcg setup file is enforced
# otherwise is might be skipped in case gfal-ls, etc., are already available
remote_lcg_setup_force: True

### Configuration for lxplus machines ###

# [local]

# base:c


# [local_fs]

# base: /


# [wlcg_fs]

# xrootd_base: root://eosuser.cern.ch//eos/user/s/stzakhar/httcp_store
# base: &::xrootd_base
# create_file_dir: True


# [wlcg_fs_infn_redirector]

# base: root://xrootd-cms.infn.it
# use_cache: $CF_WLCG_USE_CACHE
# cache_root: $CF_WLCG_CACHE_ROOT
# cache_cleanup: $CF_WLCG_CACHE_CLEANUP
# cache_max_size: 50GB
# cache_global_lock: True
# cache_mtime_patience: -1

# [wlcg_fs_global_redirector]

# base: root://cms-xrd-global.cern.ch
# use_cache: $CF_WLCG_USE_CACHE
# cache_root: $CF_WLCG_CACHE_ROOT
# cache_cleanup: $CF_WLCG_CACHE_CLEANUP
# cache_max_size: 50GB
# cache_global_lock: True
# cache_mtime_patience: -1

### Configuration for naf machines ###

[local]

#base: root://eosuser.cern.ch
base: /
[local_fs]

base: /

[wlcg_fs_eos]

xrootd_base: root://eosuser.cern.ch
base: &::xrootd_base
create_file_dir: True


[wlcg_fs]

# set this to your desired location
base: root://eosuser.cern.ch//eos/user/j/jmalvaso/higgs_cp_store/
# base: &::wlcg_fs_desy::base
# base_mkdir_rec: &::wlcg_fs_desy::gsiftp_base
create_file_dir: True
use_cache: $CF_WLCG_USE_CACHE
cache_root: $CF_WLCG_CACHE_ROOT
cache_cleanup: $CF_WLCG_CACHE_CLEANUP
cache_max_size: 50GB

[wlcg_fs_desy]

webdav_base: davs://dcache-cms-webdav-wan.desy.de:2880/pnfs/desy.de/cms/tier2/store/user/$CF_CERN_USER/$CF_STORE_NAME
gsiftp_base: gsiftp://dcache-door-cms04.desy.de:2811/pnfs/desy.de/cms/tier2/store/user/$CF_CERN_USER/$CF_STORE_NAME
xrootd_base: root://dcache-cms-xrootd.desy.de:1094/pnfs/desy.de/cms/tier2/store/user/$CF_CERN_USER/$CF_STORE_NAME
base: &::webdav_base
base_filecopy: &::webdav_base
base_stat: &::webdav_base


[wlcg_fs_cernbox]

xrootd_base: root://eosuser.cern.ch/eos/user/$CF_CERN_USER_FIRSTCHAR/$CF_CERN_USER/$CF_STORE_NAME
base: &::xrootd_base
create_file_dir: True

[wlcg_fs_desy_stzakhar]

#webdav_base: davs://dcache-cms-webdav-wan.desy.de:2880/pnfs/desy.de/cms/tier2/store/user/stzakhar/$CF_STORE_NAME
#gsiftp_base: gsiftp://dcache-door-cms04.desy.de:2811/pnfs/desy.de/cms/tier2/store/user/stzakhar/$CF_STORE_NAME
#xrootd_base: root://dcache-cms-xrootd.desy.de:1094/pnfs/desy.de/cms/tier2/store/user/stzakhar/$CF_STORE_NAME
#base: &::xrootd_base
base: /
create_file_dir: True

[wlcg_fs_desy_store]

webdav_base: davs://dcache-cms-webdav-wan.desy.de:2880/pnfs/desy.de/cms/tier2
gsiftp_base: gsiftp://dcache-door-cms04.desy.de:2811/pnfs/desy.de/cms/tier2
xrootd_base: root://dcache-cms-xrootd.desy.de:1094/pnfs/desy.de/cms/tier2
base: &::xrootd_base
use_cache: $CF_WLCG_USE_CACHE
cache_root: $CF_WLCG_CACHE_ROOT
cache_cleanup: $CF_WLCG_CACHE_CLEANUP
cache_max_size: 50GB
cache_global_lock: True
cache_mtime_patience: -1

[wlcg_fs_infn_redirector]

base: root://xrootd-cms.infn.it
use_cache: $CF_WLCG_USE_CACHE
cache_root: $CF_WLCG_CACHE_ROOT
cache_cleanup: $CF_WLCG_CACHE_CLEANUP
cache_max_size: 50GB
cache_global_lock: True
cache_mtime_patience: -1

[wlcg_fs_global_redirector]

base: root://cms-xrd-global.cern.ch
use_cache: $CF_WLCG_USE_CACHE
cache_root: $CF_WLCG_CACHE_ROOT
cache_cleanup: $CF_WLCG_CACHE_CLEANUP
cache_max_size: 50GB
cache_global_lock: True
cache_mtime_patience: -1


[luigi_resources]

naf_jmalvaso: 7000
